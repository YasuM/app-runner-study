// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: query.sql

package entity

import (
	"context"
	"database/sql"
	"time"
)

const createTask = `-- name: CreateTask :execresult
INSERT INTO task (name, status, created_at) values (?, ?, now())
`

type CreateTaskParams struct {
	Name   string
	Status int32
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createTask, arg.Name, arg.Status)
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM task where id = ?
`

func (q *Queries) DeleteTask(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTask, id)
	return err
}

const getTask = `-- name: GetTask :one
SELECT id, name, status, created_at from task WHERE id = ? LIMIT 1
`

type GetTaskRow struct {
	ID        int64
	Name      string
	Status    int32
	CreatedAt time.Time
}

func (q *Queries) GetTask(ctx context.Context, id int64) (GetTaskRow, error) {
	row := q.db.QueryRowContext(ctx, getTask, id)
	var i GetTaskRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const lisTasks = `-- name: LisTasks :many
select id, name, status, created_at from task order by created_at desc
`

type LisTasksRow struct {
	ID        int64
	Name      string
	Status    int32
	CreatedAt time.Time
}

func (q *Queries) LisTasks(ctx context.Context) ([]LisTasksRow, error) {
	rows, err := q.db.QueryContext(ctx, lisTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LisTasksRow
	for rows.Next() {
		var i LisTasksRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTask = `-- name: UpdateTask :exec
UPDATE task SET name = ?, status = ? WHERE id = ?
`

type UpdateTaskParams struct {
	Name   string
	Status int32
	ID     int64
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) error {
	_, err := q.db.ExecContext(ctx, updateTask, arg.Name, arg.Status, arg.ID)
	return err
}
